from email.header import decode_header


class Mail:
    def __init__(self, label, address, header, trunk, lac):
        # 输入信息
        self.label = label
        self.address = address

        # 邮件头处理
        """ 一个样本
        {
            'Received': 'from ... ([ip])\nby ...\nfor <...>; Sun, 14 Aug 2005 09:59:04 +0800 (CST)', 
            'Message-ID': '<200508121850.j7CAoGvt023247@spam-gw.ccert.edu.cn>', identifier generated by sender
            'From': '"yan"<(8月27-28,上海)培训课程>', 
            'Reply-To': 'yan@vip.163.com"<b4a7r0h0@vip.163.com>', 
            'To': 'lu@ccert.edu.cn', 
            'Subject': '=?gb2312?B?t8eyxs7xvq3A7bXEssbO8bncwO0to6jJs8XMxKPE4qOp?=', 
            'Date': 'Tue, 30 Aug 2005 10:08:15 +0800', 
            'MIME-Version': '1.0', 
            'Content-type': 'multipart/related;\ntype="multipart/alternative";\nboundary="----=_NextPart_000_004A_2531AAAC.6F950005"', 
            'X-Priority': '3', 
            'X-MSMail-Priority': 'Normal', 
            'X-Mailer': 'Microsoft Outlook Express 6.00.2800.1158', 
            'X-MimeOLE': 'Produced By Microsoft MimeOLE V6.00.2800.1441'
        }
        """
        if header.setdefault("From", '"default').startswith("=?"):
            s, codec = decode_header(header["From"])[0]
            try:
                header["From"] = s.decode(codec)
            except UnicodeDecodeError:
                header["From"] = s.decode('gbk', errors='replace')
        try:
            self.from_name = header["From"].split('"')[1]  # 中文的昵称编码储存，没有引号
        except IndexError:
            self.from_name = header["From"].split('<')[0]
        try:
            from_add = header["From"].split('<')[1].split('>')[0]
        except IndexError:
            from_add = header["From"]
        if from_add.find("@") == -1:
            try:
                from_add = header.setdefault("Reply-To", "<default>").split('<')[1].split('>')[0]
            except IndexError:
                from_add = header["Reply-To"]
        self.from_add = from_add
        try:
            self.to_ = header["To"]
        except KeyError:
            self.to_ = header["TO"]
        if header["Subject"].startswith("=?"):
            s, codec = decode_header(header["Subject"])[0]
            try:
                self.subject_ = s.decode(codec)
            except UnicodeDecodeError:
                self.subject_ = s.decode('gbk', errors='replace')
        else:
            self.subject_ = header["Subject"]
        try:
            self.date_ = header["Date"]
        except KeyError:
            self.date_ = header["Received"].split("; ")[-1]
        self.type_ = header.setdefault("Content-type", "default;").split(";")[0]
        self.mailer_ = header.setdefault("X-Mailer", "default")
        try:
            self.ip_ = header["Received"].split("[")[1].split("]")[0]  # ip 不都是以 [] 包围的
        except IndexError:
            ips = header["Received"].split(".")  # 这个方法仍然存在误读
            while True:
                offset = 0
                try:
                    pp = (ips[offset][-3:], ips[offset+1], ips[offset+2], ips[offset+3][:3])
                except IndexError:
                    self.ip_ = 'not_found'
                    break
                violate = False
                for term in pp:
                    if term.isdigit:
                        continue
                    else:
                        violate = True
                        break
                if not violate:
                    self.ip_ = ".".join(pp)
                    break

        # 正文处理
        """ 标签含义: 孙茂松, 陈新雄, 张开旭, 郭志芃, 刘知远. THULAC：一个高效的中文词法分析工具包. 2016.
        n/名词 np/人名 ns/地名 ni/机构名 nz/其它专名 
        m/数词 q/量词 mq/数量词 t/时间词 f/方位词 s/处所词 
        v/动词 a/形容词 d/副词 h/前接成分 k/后接成分 
        i/习语 j/简称 r/代词 c/连词 p/介词 u/助词 y/语气助词 
        e/叹词 o/拟声词 g/语素 w/标点 x/其它
        """
        self.title_split = [entry[0] for entry in lac.cut(self.subject_) if not entry[1].startswith('w')]
        trunk_trim = trunk.replace(" ", "").replace("\n", "").replace("\u3000", "")
        word_split = lac.cut(trunk_trim)
        self.nouns = [entry[0] for entry in word_split if entry[1].startswith('n')]
        self.verbs = [entry[0] for entry in word_split if entry[1].startswith('v')]
        self.adjvs = [entry[0] for entry in word_split if entry[1].startswith(('a', 'd'))]
        other_suffixes = ('t', 'f', 's', 'h', 'k', 'i', 'j', 'x')
        ignored = ('m', 'q', 'r', 'c', 'p', 'u', 'y', 'e', 'o', 'g', 'w')  # 一些虚词, 连词, 叹词...
        self.other = [entry[0] for entry in word_split if entry[1].startswith(other_suffixes)]
        self.ignored = [entry[0] for entry in word_split if entry[1].startswith(ignored)]

    def __repr__(self):
        result = "label: " + str(self.label) + "\n"
        result += "from_name: " + str(self.from_name) + "\n"
        result += "from_address: " + str(self.from_add) + "\n"
        result += "to: " + str(self.to_) + "\n"
        result += "subject: " + str(self.subject_) + "\n"
        result += "subject_split:" + str(self.title_split) + "\n"
        result += "datetime: " + str(self.date_) + "\n"
        result += "content type: " + str(self.type_) + "\n"
        result += "mailer: " + str(self.mailer_) + "\n"
        result += "ip: " + str(self.ip_) + "\n"
        result += '-------------\n'
        result += 'Nouns: ' + str(self.nouns) + "\n"
        result += 'Verbs: ' + str(self.verbs) + "\n"
        result += 'Adjs&Advs: ' + str(self.adjvs) + "\n"
        result += 'Others: ' + str(self.other) + "\n"
        return result
